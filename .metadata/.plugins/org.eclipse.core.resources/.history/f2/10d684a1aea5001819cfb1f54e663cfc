import javax.swing.text.StyledEditorKit.ForegroundAction;

/**
 * 
 * 배열에 관련한 공통 기능 정의
 * @author 송주현
 *
 */

public class ArrayUtil {

	//alt+shift+j : 함수 선언부에서 커서 놓고 단축키 누르면 함수에 대한 주석 자동 생성 (아래)
	/**
	 * @param src			복사하고자 하는 원본 배열
	 * @param increament	증가치
	 * @return	복사된 배열 		
	 */
	public static int[] copy(int[] src, int increament) { //배열을 인자로 받아서 배열을 리턴하는 함수 (static이므로 클래스 전체에서 공유)
		int[] array= new int[src.length+increament]; //array3보다 크기가 2 큰 배열 만들기
		for(int i=0; i<src.length; i++) {
			array[i]=src[i];
		}
		
		return array;	//배열의 참조값 리턴 (배열 자체x) 주소값 리턴
		// 함수가 끝나도 array의 실제 인스턴스는 남아있음 (array라는 변수 주소값은 사라짐)
		// array 변수는 주소값 (4byte) 
		// array가 가리키는 배열의 본체 (인스턴스)는 heap 에 저장됨 (copy()함수가 끝나도 남아있음)
		// 지역변수는 stack영역에 저장됨 (함수 종료후 삭제됨)
	}
	
	/**
	 * 배열 오름차순 정렬
	 * @param src	정렬하고자 하는 원본 배열
	 */
	public static void sort(int[] src) { //call by reference
		//alt+shift+r : 변수 이름 한꺼번에 바꾸기
		int tmp;
		for(int j=0; j<src.length-1; j++) {
			for(int i=0; i<src.length-j-1; i++) {
				if(src[i]>src[i+1]) {
					tmp=src[i];
					src[i]=src[i+1];
					src[i+1]=tmp;
				}
			}
		}
		
	}
	
	
	
	public static void main(String[] args) {
		int[] array= {1,5,2,6,9,7};
		int[] copy= ArrayUtil.copy(array, 4);
		for (int i : copy) {
			System.out.print(i+"\t");
		}
		
		System.out.println();
		
		ArrayUtil.sort(array);
		for (int i : array) {
			System.out.print(i+"\t");
		}
		
		//다차원배열 생성과 초기화
		int[][] array20= new int[][] {{1,2,3},{4,5,6},{7,8,9}}; //기본형
		int[][] array21= { {1,2,3}, {4,5,6}, {7,8,9} }; //축약형 (이렇게 많이씀)
		
		System.out.println();
		//구구단 만들기
		int[][] gugudan = new int[8][9];
		for(int i=0; i<gugudan.length; i++) {
			for(int j=0; j<gugudan[i].length; j++) {
				gugudan[i][j]= (i+2)* (j+1);
				System.out.print((i+2)+" * "+(j+1)+ " = "+gugudan[i][j]+"\t");
			}
			System.out.println();
		}
	}
	
	
}

//과제 : 배열로 stack 구현 (클래스로 구현)
