/**
 * 
 * 배열을 이용한 은행 계좌 관리
 * 
 * @author 송주현
 *
 */

public class AccountManager {
	
	
	private Account[] accounts;
	private int count=0;
	
	//생성자 만들기
	AccountManager(){
		this.accounts = null;
	}
	
	AccountManager(int size){
		this.accounts= new Account[size];
	}
	
	/**
	 * @param account	manager 배열에 새로 추가될 새 계좌
	 */
	public void add(Account account) { //계좌 새로 생성 : call by reference
		accounts[count]=account;
		count++;
	}
	
	
	/**
	 * @return	전체 계좌 리스트의 레퍼런스 리턴
	 */
	public Account[] list() { //전체 리스트 리턴 : 현재 저장된 계좌 목록 (유효한 데이터만 반환하기)
		Account[] acc=new Account[count];
		for(int i=0; i<count; i++) {
			acc[i]= accounts[i];
		}
		return acc;
	}
	
	/**
	 * @param accountNum	검색할 계좌번호
	 * @return	이 계좌번호를 가진 account 객체의 레퍼런스 리턴
	 */
	public Account get(String accountNum) { //계좌번호로 계좌 검색 
		boolean isFind=false;
		for(int i=0; i<count; i++) {			
			if( accounts[i].checkAccountNum(accountNum) ) {
				isFind=true;
				return accounts[i];
			}				
		}
		else {
			return null;
		}
	}
	
	/**
	 * @param accountOwner
	 * @return
	 */
	public Account[] search(String accountOwner) { 
		//예금주명으로 계좌 검색 (중복검색 처리하기) 동일인 중복 계좌는 모두 리턴 (여러개일 경우를 대비해서 배열로 리턴)
		return null;
	}
	
	/**
	 * @param accountNum
	 * @return
	 */
	public boolean remove(String accountNum) {
		//삭제완료 true/ 삭제불가 false 리턴
		//데이터 삭제 : 참조값을 끊는 방법이 제일 간단 (null 로 설정)
		//다른방법 : 데이터 땡기기 (끊고 땡기기)
		return false;
	}

}
