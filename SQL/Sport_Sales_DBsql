-- continents Table Create SQL
CREATE TABLE continents
(
    continent_id      NUMBER          NOT NULL, 
    continent_name    VARCHAR2(50)    NOT NULL, 
    CONSTRAINT CONTINENTS_PK PRIMARY KEY (continent_id)
)
/

CREATE SEQUENCE continents_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER continents_continent_id_AI_TRG
BEFORE INSERT ON continents 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT continents_SEQ.NEXTVAL
    INTO: NEW.continent_id
    FROM DUAL;
END;
/

COMMENT ON TABLE continents IS '대륙'
/

COMMENT ON COLUMN continents.continent_id IS '대륙 고유 코드'
/

COMMENT ON COLUMN continents.continent_name IS '대륙명'
/


-- locations Table Create SQL
CREATE TABLE locations
(
    location_id            NUMBER          NOT NULL, 
    location_name          VARCHAR2(50)    NOT NULL, 
    location_state_name    VARCHAR2(50)    NULL, 
    continent_id           NUMBER          NOT NULL, 
    CONSTRAINT LOCATIONS_PK PRIMARY KEY (location_id)
)
/

CREATE SEQUENCE locations_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER locations_location_id_AI_TRG
BEFORE INSERT ON locations 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT locations_SEQ.NEXTVAL
    INTO: NEW.location_id
    FROM DUAL;
END;
/

COMMENT ON TABLE locations IS '지역'
/

COMMENT ON COLUMN locations.location_id IS '지역 고유 번호'
/

COMMENT ON COLUMN locations.location_name IS '지역명'
/

COMMENT ON COLUMN locations.location_state_name IS '주명'
/

COMMENT ON COLUMN locations.continent_id IS '대륙 고유 코드'
/

ALTER TABLE locations
    ADD CONSTRAINT FK_locations_continent_id_cont FOREIGN KEY (continent_id)
        REFERENCES continents (continent_id)
/


-- departments Table Create SQL
CREATE TABLE departments
(
    department_id      NUMBER          NOT NULL, 
    department_name    VARCHAR2(20)    NOT NULL, 
    location_id        NUMBER          NOT NULL, 
    CONSTRAINT DEPARTMENTS_PK PRIMARY KEY (department_id)
)
/

CREATE SEQUENCE departments_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER departments_department__AI_TRG
BEFORE INSERT ON departments 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT departments_SEQ.NEXTVAL
    INTO: NEW.department_id
    FROM DUAL;
END;
/

COMMENT ON TABLE departments IS '부서'
/

COMMENT ON COLUMN departments.department_id IS '부서 고유 번호'
/

COMMENT ON COLUMN departments.department_name IS '부서 명'
/

COMMENT ON COLUMN departments.location_id IS '지역 고유 번호'
/

ALTER TABLE departments
    ADD CONSTRAINT FK_departments_location_id_loc FOREIGN KEY (location_id)
        REFERENCES locations (location_id)
/


-- commissions Table Create SQL
CREATE TABLE commissions
(
    commission_id         NUMBER    NOT NULL, 
    commission_percent    NUMBER    NOT NULL, 
    CONSTRAINT COMMISSIONS_PK PRIMARY KEY (commission_id)
)
/

CREATE SEQUENCE commissions_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER commissions_commission__AI_TRG
BEFORE INSERT ON commissions 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT commissions_SEQ.NEXTVAL
    INTO: NEW.commission_id
    FROM DUAL;
END;
/

COMMENT ON TABLE commissions IS '커미션'
/

COMMENT ON COLUMN commissions.commission_id IS '커미션 고유 코드'
/

COMMENT ON COLUMN commissions.commission_percent IS '커미션 퍼센트'
/


-- customergrades Table Create SQL
CREATE TABLE customergrades
(
    customer_grade_id             NUMBER          NOT NULL, 
    customer_grade_name           VARCHAR2(20)    NOT NULL, 
    customer_grade_credit_rate    VARCHAR2(20)    NOT NULL, 
    customer_grade_promotion      NUMBER          NULL, 
    CONSTRAINT CUSTOMERGRADES_PK PRIMARY KEY (customer_grade_id)
)
/

CREATE SEQUENCE customergrades_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER customergrades_customer_AI_TRG
BEFORE INSERT ON customergrades 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT customergrades_SEQ.NEXTVAL
    INTO: NEW.customer_grade_id
    FROM DUAL;
END;
/

COMMENT ON TABLE customergrades IS '고객등급'
/

COMMENT ON COLUMN customergrades.customer_grade_id IS '고객등급 고유 코드'
/

COMMENT ON COLUMN customergrades.customer_grade_name IS '고객등급명'
/

COMMENT ON COLUMN customergrades.customer_grade_credit_rate IS '신용등급'
/

COMMENT ON COLUMN customergrades.customer_grade_promotion IS '프로모션 가격'
/


-- employees Table Create SQL
CREATE TABLE employees
(
    employee_id                NUMBER           NOT NULL, 
    employee_first_name        VARCHAR2(40)     NOT NULL, 
    employee_last_name         VARCHAR2(40)     NOT NULL, 
    employee_system_user_id    VARCHAR2(40)     NOT NULL, 
    employee_hire_date         DATE             NOT NULL, 
    department_id              NUMBER           NULL, 
    employee_position          VARCHAR2(100)    NOT NULL, 
    employee_salary            NUMBER           NOT NULL, 
    commission_id              NUMBER           NULL, 
    employee_comment           VARCHAR2(200)    NULL, 
    CONSTRAINT EMPLOYEES_PK PRIMARY KEY (employee_id)
)
/

CREATE SEQUENCE employees_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER employees_employee_id_AI_TRG
BEFORE INSERT ON employees 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT employees_SEQ.NEXTVAL
    INTO: NEW.employee_id
    FROM DUAL;
END;
/

COMMENT ON TABLE employees IS '사원'
/

COMMENT ON COLUMN employees.employee_id IS '사원 고유 번호'
/

COMMENT ON COLUMN employees.employee_first_name IS 'first name'
/

COMMENT ON COLUMN employees.employee_last_name IS 'last name'
/

COMMENT ON COLUMN employees.employee_system_user_id IS '시스템 user id'
/

COMMENT ON COLUMN employees.employee_hire_date IS '입사일'
/

COMMENT ON COLUMN employees.department_id IS '부서 고유 번호'
/

COMMENT ON COLUMN employees.employee_position IS '직급 이름'
/

COMMENT ON COLUMN employees.employee_salary IS '월 급여'
/

COMMENT ON COLUMN employees.commission_id IS '커미션 고유 코드'
/

COMMENT ON COLUMN employees.employee_comment IS '사원들에 대한 의견'
/

ALTER TABLE employees
    ADD CONSTRAINT FK_employees_department_id_dep FOREIGN KEY (department_id)
        REFERENCES departments (department_id)
/

ALTER TABLE employees
    ADD CONSTRAINT FK_employees_commission_id_com FOREIGN KEY (commission_id)
        REFERENCES commissions (commission_id)
/


-- customers Table Create SQL
CREATE TABLE customers
(
    customer_id              NUMBER           NOT NULL, 
    customer_name            VARCHAR2(50)     NOT NULL, 
    customer_phone_number    VARCHAR2(50)     NULL, 
    customer_address         VARCHAR2(200)    NOT NULL, 
    customer_city_name       VARCHAR2(50)     NULL, 
    location_id              NUMBER           NOT NULL, 
    customer_postal_code     VARCHAR2(50)     NULL, 
    employee_id              NUMBER           NOT NULL, 
    customer_grade_id        NUMBER           NOT NULL, 
    customer_comment         VARCHAR2(200)    NULL, 
    customer_note            VARCHAR2(200)    NULL, 
    CONSTRAINT CUSTOMERS_PK PRIMARY KEY (customer_id)
)
/

CREATE SEQUENCE customers_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER customers_customer_id_AI_TRG
BEFORE INSERT ON customers 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT customers_SEQ.NEXTVAL
    INTO: NEW.customer_id
    FROM DUAL;
END;
/

COMMENT ON TABLE customers IS '고객'
/

COMMENT ON COLUMN customers.customer_id IS '고객번호'
/

COMMENT ON COLUMN customers.customer_name IS '고객회사명'
/

COMMENT ON COLUMN customers.customer_phone_number IS '전화번호'
/

COMMENT ON COLUMN customers.customer_address IS '주소'
/

COMMENT ON COLUMN customers.customer_city_name IS '도시명'
/

COMMENT ON COLUMN customers.location_id IS '지역 고유 번호'
/

COMMENT ON COLUMN customers.customer_postal_code IS '우편번호'
/

COMMENT ON COLUMN customers.employee_id IS '사원 고유 번호'
/

COMMENT ON COLUMN customers.customer_grade_id IS '고객등급 고유 코드'
/

COMMENT ON COLUMN customers.customer_comment IS '고객에 대한 일반적인 의견'
/

COMMENT ON COLUMN customers.customer_note IS '비고'
/

ALTER TABLE customers
    ADD CONSTRAINT FK_customers_employee_id_emplo FOREIGN KEY (employee_id)
        REFERENCES employees (employee_id)
/

ALTER TABLE customers
    ADD CONSTRAINT FK_customers_location_id_locat FOREIGN KEY (location_id)
        REFERENCES locations (location_id)
/

ALTER TABLE customers
    ADD CONSTRAINT FK_customers_customer_grade_id FOREIGN KEY (customer_grade_id)
        REFERENCES customergrades (customer_grade_id)
/


-- orderstates Table Create SQL
CREATE TABLE orderstates
(
    order_state_code           NUMBER           NOT NULL, 
    order_state_name           VARCHAR2(50)     NOT NULL, 
    order_state_description    VARCHAR2(200)    NULL, 
    CONSTRAINT ORDERSTATES_PK PRIMARY KEY (order_state_code)
)
/

CREATE SEQUENCE orderstates_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER orderstates_order_state_AI_TRG
BEFORE INSERT ON orderstates 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT orderstates_SEQ.NEXTVAL
    INTO: NEW.order_state_code
    FROM DUAL;
END;
/

COMMENT ON TABLE orderstates IS '주문 상태 코드'
/

COMMENT ON COLUMN orderstates.order_state_code IS '주문 상태 코드'
/

COMMENT ON COLUMN orderstates.order_state_name IS '주문 상태명'
/

COMMENT ON COLUMN orderstates.order_state_description IS '설명'
/


-- products Table Create SQL
CREATE TABLE products
(
    product_id                   NUMBER           NOT NULL, 
    product_name                 VARCHAR2(50)     NOT NULL, 
    product_price                NUMBER           NOT NULL, 
    product_release_date         DATE             NOT NULL, 
    product_short_description    VARCHAR2(200)    NULL, 
    product_unit                 NUMBER           NOT NULL, 
    product_full_description     LONG             NULL, 
    product_picture              BLOB             NULL, 
    CONSTRAINT PRODUCTS_PK PRIMARY KEY (product_id)
)
/

CREATE SEQUENCE products_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER products_product_id_AI_TRG
BEFORE INSERT ON products 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT products_SEQ.NEXTVAL
    INTO: NEW.product_id
    FROM DUAL;
END;
/

COMMENT ON TABLE products IS '제품'
/

COMMENT ON COLUMN products.product_id IS '제품 고유 번호'
/

COMMENT ON COLUMN products.product_name IS '제품명'
/

COMMENT ON COLUMN products.product_price IS '단가'
/

COMMENT ON COLUMN products.product_release_date IS '출시일'
/

COMMENT ON COLUMN products.product_short_description IS '요약된 설명'
/

COMMENT ON COLUMN products.product_unit IS '판매 단위'
/

COMMENT ON COLUMN products.product_full_description IS '긴 설명'
/

COMMENT ON COLUMN products.product_picture IS '사진'
/


-- orders Table Create SQL
CREATE TABLE orders
(
    order_id            NUMBER    NOT NULL, 
    customer_id         NUMBER    NOT NULL, 
    order_date          DATE      NOT NULL, 
    order_state_code    NUMBER    NOT NULL, 
    CONSTRAINT ORDERS_PK PRIMARY KEY (order_id)
)
/

CREATE SEQUENCE orders_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER orders_order_id_AI_TRG
BEFORE INSERT ON orders 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT orders_SEQ.NEXTVAL
    INTO: NEW.order_id
    FROM DUAL;
END;
/

COMMENT ON TABLE orders IS '주문'
/

COMMENT ON COLUMN orders.order_id IS '주문 고유 번호'
/

COMMENT ON COLUMN orders.customer_id IS '고객번호'
/

COMMENT ON COLUMN orders.order_date IS '주문 날짜'
/

COMMENT ON COLUMN orders.order_state_code IS '주문 상태 코드'
/

ALTER TABLE orders
    ADD CONSTRAINT FK_orders_order_state_code_ord FOREIGN KEY (order_state_code)
        REFERENCES orderstates (order_state_code)
/

ALTER TABLE orders
    ADD CONSTRAINT FK_orders_customer_id_customer FOREIGN KEY (customer_id)
        REFERENCES customers (customer_id)
/


-- warehouses Table Create SQL
CREATE TABLE warehouses
(
    warehouse_id              NUMBER           NOT NULL, 
    warehouse_name            VARCHAR2(50)     NULL, 
    location_id               NUMBER           NOT NULL, 
    warehouse_phone_number    VARCHAR2(50)     NULL, 
    warehouse_address         VARCHAR2(200)    NOT NULL, 
    warehouse_city_name       VARCHAR2(50)     NULL, 
    warehouse_postal_code     VARCHAR2(50)     NULL, 
    employee_id               NUMBER           NOT NULL, 
    CONSTRAINT WAREHOUSES_PK PRIMARY KEY (warehouse_id)
)
/

CREATE SEQUENCE warehouses_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER warehouses_warehouse_id_AI_TRG
BEFORE INSERT ON warehouses 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT warehouses_SEQ.NEXTVAL
    INTO: NEW.warehouse_id
    FROM DUAL;
END;
/

COMMENT ON TABLE warehouses IS '창고'
/

COMMENT ON COLUMN warehouses.warehouse_id IS '창고 고유 번호'
/

COMMENT ON COLUMN warehouses.warehouse_name IS '창고명'
/

COMMENT ON COLUMN warehouses.location_id IS '지역 고유 번호'
/

COMMENT ON COLUMN warehouses.warehouse_phone_number IS '전화번호'
/

COMMENT ON COLUMN warehouses.warehouse_address IS '주소'
/

COMMENT ON COLUMN warehouses.warehouse_city_name IS '도시명'
/

COMMENT ON COLUMN warehouses.warehouse_postal_code IS '우편번호'
/

COMMENT ON COLUMN warehouses.employee_id IS '담당 관리사원 고유 번호'
/

ALTER TABLE warehouses
    ADD CONSTRAINT FK_warehouses_employee_id_empl FOREIGN KEY (employee_id)
        REFERENCES employees (employee_id)
/

ALTER TABLE warehouses
    ADD CONSTRAINT FK_warehouses_location_id_loca FOREIGN KEY (location_id)
        REFERENCES locations (location_id)
/


-- stocklossreasons Table Create SQL
CREATE TABLE stocklossreasons
(
    stock_loss_reason_id    NUMBER           NOT NULL, 
    stock_loss_reason       VARCHAR2(200)    NOT NULL, 
    CONSTRAINT STOCKLOSSREASONS_PK PRIMARY KEY (stock_loss_reason_id)
)
/

CREATE SEQUENCE stocklossreasons_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER stocklossreasons_stock__AI_TRG
BEFORE INSERT ON stocklossreasons 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT stocklossreasons_SEQ.NEXTVAL
    INTO: NEW.stock_loss_reason_id
    FROM DUAL;
END;
/

COMMENT ON TABLE stocklossreasons IS '재고 바닥난 이유'
/

COMMENT ON COLUMN stocklossreasons.stock_loss_reason_id IS '재고가 바닥난 이유 고유 번호'
/

COMMENT ON COLUMN stocklossreasons.stock_loss_reason IS '이유'
/


-- stocks Table Create SQL
CREATE TABLE stocks
(
    warehouse_id            NUMBER    NOT NULL, 
    product_id              NUMBER    NOT NULL, 
    stock_available         NUMBER    NOT NULL, 
    stock_max               NUMBER    NOT NULL, 
    stock_loss_reason_id    NUMBER    NULL, 
    stock_reorder_date      DATE      NULL, 
    stock_restocked_date    DATE      NULL, 
    CONSTRAINT STOCKS_PK PRIMARY KEY (warehouse_id, product_id)
)
/

COMMENT ON TABLE stocks IS '재고'
/

COMMENT ON COLUMN stocks.warehouse_id IS '창고 고유 번호'
/

COMMENT ON COLUMN stocks.product_id IS '제품 고유 번호'
/

COMMENT ON COLUMN stocks.stock_available IS '재고량'
/

COMMENT ON COLUMN stocks.stock_max IS '최대 재고량'
/

COMMENT ON COLUMN stocks.stock_loss_reason_id IS '재고가 바닥난 이유 고유 번호'
/

COMMENT ON COLUMN stocks.stock_reorder_date IS '재주문 시점'
/

COMMENT ON COLUMN stocks.stock_restocked_date IS '재고가 다시 들어오는 날짜'
/

ALTER TABLE stocks
    ADD CONSTRAINT FK_stocks_stock_loss_reason_id FOREIGN KEY (stock_loss_reason_id)
        REFERENCES stocklossreasons (stock_loss_reason_id)
/

ALTER TABLE stocks
    ADD CONSTRAINT FK_stocks_product_id_products_ FOREIGN KEY (product_id)
        REFERENCES products (product_id)
/

ALTER TABLE stocks
    ADD CONSTRAINT FK_stocks_warehouse_id_warehou FOREIGN KEY (warehouse_id)
        REFERENCES warehouses (warehouse_id)
/


-- orderitem Table Create SQL
CREATE TABLE orderitem
(
    order_item_id          NUMBER     NOT NULL, 
    order_id               NUMBER     NOT NULL, 
    product_id             NUMBER     NOT NULL, 
    order_item_quantity    NUMBER     NOT NULL, 
    order_is_shipping      CHAR(1)    NULL, 
    warehouse_id           NUMBER     NOT NULL, 
    CONSTRAINT ORDERITEM_PK PRIMARY KEY (order_item_id)
)
/

CREATE SEQUENCE orderitem_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER orderitem_order_item_id_AI_TRG
BEFORE INSERT ON orderitem 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT orderitem_SEQ.NEXTVAL
    INTO: NEW.order_item_id
    FROM DUAL;
END;
/

COMMENT ON TABLE orderitem IS '주문항목'
/

COMMENT ON COLUMN orderitem.order_item_id IS '주문 항목 번호'
/

COMMENT ON COLUMN orderitem.order_id IS '주문 고유 번호'
/

COMMENT ON COLUMN orderitem.product_id IS '제품 고유 번호'
/

COMMENT ON COLUMN orderitem.order_item_quantity IS '주문 수량'
/

COMMENT ON COLUMN orderitem.order_is_shipping IS '선적 여부'
/

COMMENT ON COLUMN orderitem.warehouse_id IS '창고 고유 번호'
/

ALTER TABLE orderitem
    ADD CONSTRAINT FK_orderitem_order_id_orders_o FOREIGN KEY (order_id)
        REFERENCES orders (order_id)
/

ALTER TABLE orderitem
    ADD CONSTRAINT FK_orderitem_product_id_produc FOREIGN KEY (product_id)
        REFERENCES products (product_id)
/

ALTER TABLE orderitem
    ADD CONSTRAINT FK_orderitem_warehouse_id_stoc FOREIGN KEY (warehouse_id)
        REFERENCES stocks (warehouse_id)
/


-- payments Table Create SQL
CREATE TABLE payments
(
    payment_id               NUMBER          NOT NULL, 
    payment_complete_date    DATE            NULL, 
    payment_method           VARCHAR2(20)    NULL, 
    order_id                 NUMBER          NOT NULL, 
    CONSTRAINT PAYMENTS_PK PRIMARY KEY (payment_id)
)
/

CREATE SEQUENCE payments_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER payments_payment_id_AI_TRG
BEFORE INSERT ON payments 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT payments_SEQ.NEXTVAL
    INTO: NEW.payment_id
    FROM DUAL;
END;
/

COMMENT ON TABLE payments IS '결제'
/

COMMENT ON COLUMN payments.payment_id IS '결제 고유 번호'
/

COMMENT ON COLUMN payments.payment_complete_date IS '결제 완료일'
/

COMMENT ON COLUMN payments.payment_method IS '지불방법'
/

COMMENT ON COLUMN payments.order_id IS '주문 고유 번호'
/

ALTER TABLE payments
    ADD CONSTRAINT FK_payments_order_id_orders_or FOREIGN KEY (order_id)
        REFERENCES orders (order_id)
/


-- shippings Table Create SQL
CREATE TABLE shippings
(
    shipping_id          NUMBER    NOT NULL, 
    order_item_id        NUMBER    NOT NULL, 
    shipping_quantity    NUMBER    NULL, 
    shipping_date        DATE      NULL, 
    CONSTRAINT SHIPPINGS_PK PRIMARY KEY (shipping_id)
)
/

CREATE SEQUENCE shippings_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER shippings_shipping_id_AI_TRG
BEFORE INSERT ON shippings 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT shippings_SEQ.NEXTVAL
    INTO: NEW.shipping_id
    FROM DUAL;
END;
/

COMMENT ON TABLE shippings IS '운송'
/

COMMENT ON COLUMN shippings.shipping_id IS '운송 고유 번호'
/

COMMENT ON COLUMN shippings.order_item_id IS '주문 항목 번호'
/

COMMENT ON COLUMN shippings.shipping_quantity IS '선적 수량'
/

COMMENT ON COLUMN shippings.shipping_date IS '선적 날짜'
/

ALTER TABLE shippings
    ADD CONSTRAINT FK_shippings_order_item_id_ord FOREIGN KEY (order_item_id)
        REFERENCES orderitem (order_item_id)
/
